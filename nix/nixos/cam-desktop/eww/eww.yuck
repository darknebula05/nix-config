(defpoll date :interval "1s" "date '+%m/%d %A'")
(defpoll time :interval "1s" "date '+%T'")

(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "30px"
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  :focusable false
  (bar))

(defwidget bar []
  (centerbox
    (left)
    (center)
    (right)))

(defwidget left []
  (box  :halign "start"
        :class "left"
        :space-evenly false
  (workspaces)
  (submap)
  ))

(deflisten workspace "scripts/workspace")
(defwidget workspaces []
  (literal :content workspace))

(deflisten submaps "scripts/submap")
(defwidget submap []
  (literal :content submaps))

(defwidget center []
  (box :class "center"
    (button :width 26 :height 26 date)))

(defwidget right []
  (box  :halign "end"
        :space-evenly false
        :class "right"
    (systray :class "systray" :pack-direction "rtl")
    (brightness)
    (audio)
    time))

; (defvar bright 100 "test -p /tmp/gammastep.fifo || mkfifo /tmp/gammastep.fifo; tail -f /tmp/gammastep.fifo")
(deflisten bright :initial 100 "test -p /tmp/gammastep.fifo || mkfifo /tmp/gammastep.fifo; tail -f /tmp/gammastep.fifo;")
(defwidget brightness[]
  (box :class "brightness" :orientation "h" :space-evenly false :halign "end"
      (eventbox :onclick "pkill gammastep || hyprctl dispatch exec 'gammastep -l 0:0 -o -b 0.${bright}'"
      (metric :label "Brightness "
              :value bright
              ; :onchange "pkill gammastep; hyprctl dispatch exec 'gammastep -l 0:0 -o -b 0.{}'"
              :onchange "echo {} > /tmp/gammastep.fifo"
              ))))

(defpoll volume :interval "1s" :initial 0 "pamixer --get-volume")
(defwidget audio []
  (box :class "audio" :orientation "h" :space-evenly false :halign "end"
    (eventbox :onclick "pkill pavucontrol || hyprctl dispatch exec pavucontrol"
    (metric :label "Audio "
            :value volume
            :onchange "pamixer --set-volume {}"))))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
      (box :class "label" label)
      (scale :min 0
             :max 99
             :round-digits 0
             :active {onchange != ""}
             :value value
             :onchange onchange)))
